import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';
import Head from 'next/head';
import Link from 'next/link';
import { BusFront, EyeFill, EyeSlashFill} from 'react-bootstrap-icons';
import { Controller, useForm } from 'react-hook-form';
import apiClient from '@/apiClient';
import { useState } from 'react';
import Swal from 'sweetalert2';

function NewUsers() {

  const [showPwd, setShowPwd] = useState(false);

  const {control, handleSubmit, formState:{errors}, setError} = useForm();
  const formSubmit = (data) => {
    console.log(data);

    // Enviar la informacion al backend
    apiClient.post('/users', data)
    .then((response) => {
      //console.log(response.data);
      //alert(response.data.message);
      Swal.fire({
        position: 'top-end',
        icon: 'success',
        text: response.data.message,
        showConfirmButton: false,
        timer: 2500
      });
    })
    .catch((error) => {
      console.log(error);
      alert(error.response.data.message);

      if(error.response.data.errors) {
        error.response.data.errors.forEach((errorItem) => {
          setError(errorItem.field, {
            type: "validation",
            message: errorItem.error
          });
        })
      }

    })
  };

  return (
    <>
      <Head>
        <title>SIRTA</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
          integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
          crossorigin="anonymous"
        />
      </Head>

      <Form onSubmit={handleSubmit(formSubmit)}>
        <div className="circulo">
          <div className="autobus">
            <BusFront className="icon"></BusFront>
          </div>
        </div>

        <div>
          <h1 className="title"> ¡Bienvenido!</h1>
        </div>
        <Form.Group className="mb-3" controlId="formBasicEmail">
          <Form.Label className="formGroup-Login">
            Correo electronico
          </Form.Label>
          <Controller
            name='email'
            control={control}
            rules={{
              required: true,
              pattern: {
                value: /(.+)@(.+){2,}\.(.+){2,}/i,
              }
            }}
            render={({field}) => (
              <Form.Control 
                isInvalid={!!errors.email}
                type="text" {...field} 
              />
            )}
          />

          {/* Validaciones */}
          {errors.email?.type === "pattern" && (
            <Form.Control.Feedback className='formEmail' type="invalid">
              No es un email válido.
            </Form.Control.Feedback>
          )}

          {errors.email?.type === "required" && (
            <Form.Control.Feedback className='formEmail' type="invalid">
              Este campo es obligatorio.
            </Form.Control.Feedback>
          )}

        </Form.Group>

        <Form.Group className="mb-3" controlId="formBasicEmail">
          <Form.Label className="formGroup-Login">Contraseña</Form.Label>
          <Controller
            name='password'
            control={control}
            rules={{
              required: true,
              pattern: {
                value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,12}$/i,
              }
            }}
            render={({field}) => (
              <Form.Control 
                isInvalid={!!errors.password} 
                type={showPwd ? "text" : "password"} {...field} 
              />
            )}
          />
          {/* // Ver la contraseña */}
          <div onClick={() => setShowPwd(!showPwd)}>
            { showPwd ? <EyeFill className="eyeFill"></EyeFill> : 
              <EyeSlashFill className="eyeFill"></EyeSlashFill> }
          </div>
          
          {/* // Validaciones */}
          {errors.password?.type === "required" && (
            <Form.Control.Feedback className='formPassword' type="invalid">
              Este campo es obligatorio.
            </Form.Control.Feedback>
          )}

          {errors.password?.type === "pattern" && (
            <Form.Control.Feedback className='formPassword' type="invalid">
              La contraseña debe tener mínimo 8 caracteres con letras y números.
            </Form.Control.Feedback>
          )}

        </Form.Group>

        <div className="d-flex justify-content-center">
          <Button type="submit" className="boton">
            Ingresar
          </Button>
        </div>

        <p className="link">
          ¿No tienes usuario?{" "}
          <Link href="restore" className="link2">
            Registrate aquí
          </Link>
        </p>
      </Form>

      
    </>
  );
}

export default NewUsers;